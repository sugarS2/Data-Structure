/**
 ---------------------------------------------------------------------------------------------------------------
 
 ■ 제네릭(Generic) 정의
  - 데이터 형식에 의존하지 않고, 하나의 값이 여러 다른 데이터 타입들을 가질 수 있도록 하는 방법 
  - 클래스 내부에서 지정하는 것이 아닌, 외부에서 사용자에 의해 지정되는 것을 의미

 ■ 제네릭(Generic) 장점 
  1. 제네릭을 사용하면 잘못된 타입이 들어올 수 있는 것을 컴파일 단계에서 방지할 수 있다. 
  2. 클래스 외부에서 타입을 지정해주기 때문에 따로 타입을 체크하고 변환해줄 필요가 없다. 즉, 관리하기 편하다.
  3. 비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다. 
 
 ■ 제네릭(Generic) 사용방법 [<T>:Type, <E>:Element, <K>:Key, <V>:Value, <N>:Number] 
 1. 클래스 및 인터페이스 선언
public class GenericClass1<T> {}
public Interface GenericInterface1<T> {}

public class GenericClass2<T, K> {}
public Interface GenericInterface2<T, K> {}

public class HashMap<K, V> {} //HashMap의 경우 아래와 같이 선언되어 있을 것이다. 

 2. 제네릭 클래스 사용법
   - 객체 생성 시, 구체적인 타입 명시 필요 
   - 주의 : 타입<T> 파라미터로 명시할 수 있는 것은 참조타입(Reference Type)밖에 올 수 없다. 
           즉, int, double, char 같은 primitive type은 올 수 없다. 
           int형 double형 등 primitive type의 경우 Integer, Double같은 Wrapper Type으로 쓰는 이유가 바로 위와같은 이유다.
예시1) 
public class ClassName<T, K> {}
public class Main {
	public static void main(String[] args) {
		ClassName<String, Integer> a = new ClassName<String, Integer>(); 
	}
}
예시2) 
public class ClassName<T> {}
public class Student {}
public class Main {
	public static void main(String[] args) {
		ClassName<Student> a = new ClassName<Student>(); // 참조타입이 올 수 있다는 것은 사용자가 정의한 클래스도 타입으로 올 수 있다. 
	}
}
 ---------------------------------------------------------------------------------------------------------------
 */